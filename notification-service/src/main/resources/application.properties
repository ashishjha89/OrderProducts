spring.application.name=notification-service

# Assigns a random free port on startup
server.port=0

######  Actuator and Tracing Configuration (for monitoring and observability) #######
# Actuator endpoints are exposed
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Tracing with Zipkin is enabled
# Zipkin is exposed on localhost:9411 by docker-compose
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans/
# Samples all traces. For production, consider a lower value (e.g., 0.1) to reduce overhead.
management.tracing.sampling.probability=1

# Micrometer metrics configuration
management.observations.key-values.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Logging Configuration
logging.level.root=INFO
logging.level.com.orderproduct=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.org.springframework.cloud=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.kafka=INFO

# Enhanced logging pattern with timestamp and thread info
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] [%thread] %logger{36} - %m%n

# Kafka Properties
# Kafka is exposed on localhost:9092 by docker-compose
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=notificationId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.orderproduct.notificationservice.OrderPlacedEvent