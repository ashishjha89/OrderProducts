spring.application.name=order-service

######  Database Configuration #######
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/order_product_db
spring.datasource.username=order_product_user
# TODO: Fix this using environment variables or secrets manager
spring.datasource.password=283656ff3b8e513f
spring.jpa.hibernate.ddl-auto=none

#  Inventory Service Configuration #######
inventory.api.base-url=http://inventory-service

# Assigns a random free port on startup
server.port=0

# Eureka Client Configuration
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Spring Doc (Swagger UI) Configuration
springdoc.api-docs.path=/api/order/v3/api-docs
springdoc.swagger-ui.path=/api/order/swagger-ui.html

######  Actuator and Tracing Configuration (for monitoring and observability) #######
management.health.circuitbreakers.enabled=true
# Actuator endpoints are exposed
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Tracing with Zipkin is enabled
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
# Samples all traces. For production, consider a lower value (e.g., 0.1) to reduce overhead.
management.tracing.sampling.probability=1.0

# Micrometer metrics configuration
management.observations.key-values.application==${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true

######## Resilinece4j Properties ###############
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

# size of the buffer for storing circuit breaker events. These events can be consumed by event consumers,
# which are typically used for monitoring, logging, or metrics purposes.
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

# The slidingWindowType property determines how the circuit breaker evaluates the state of the circuit
# based on recorded call results over a period of time or a number of calls (TIME_BASED or COUNT_BASED).
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=TIME_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10

# The percentage of failures that must occur before the circuit breaker opens. A typical value might be between 50-70%
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=30s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Only record InternalServerException as a failure for the circuit breaker
resilience4j.circuitbreaker.instances.inventory.record-exceptions=com.orderproduct.orderservice.common.InternalServerException

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s
# Only retry on InternalServerException (i.e., 5xx and 429)
resilience4j.retry.instances.inventory.retryExceptions=com.orderproduct.orderservice.common.InternalServerException

# Logging Configuration
logging.level.root=INFO
logging.level.com.orderproduct=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
logging.level.org.springframework.cloud=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.kafka=INFO

# Enhanced logging pattern with timestamp and thread info
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] [%thread] %logger{36} - %m%n

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.orderproduct.orderservice.event.OrderPlacedEvent

# Kafka Producer Retry Properties
spring.kafka.producer.retries=3
spring.kafka.producer.properties.delivery.timeout.ms=15000
spring.kafka.producer.properties.request.timeout.ms=5000
spring.kafka.producer.acks=all
spring.kafka.producer.properties.retry.backoff.ms=1000